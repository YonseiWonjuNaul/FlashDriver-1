5.3 한 일
BM

[Integrate BM with block_ftl, very roughly]
	block_ftl에서 BM을 사용할 수 있도록 함. 다만, 약간의 문제가 있긴 하였음.
	처음에는 BM을 static library인 libbm.a 로 만들어서 compile에 포함시키려고 했지만, ftl에서의 Makefile에 static library를 어떻게 포함시켜야할 지 몰라서 제대로 넣지 못하였음.
	또한, static library 대신 같이 컴파일하게 만드려고도 해보았지만, ftl과 다른 폴더에 있는 경우에 그 object file을 제대로 불러오지 못해서(Makefile에서의 설정된 경로를 수정해야 하는데) 기존의 blockmanager 폴더에 있는 소스파일들을 가져오지 못했음.
	결국, ftl이 있는 폴더에 BM 소스파일들을 그대로 옮겨놓은 뒤, YouHaveToDoList.txt에 나와있는 대로 '원래 ftl에 BM 포함되어있던 것처럼' 같이 컴파일하였다. 따라서 BM을 사용할 수는 있게 되었음.
	다만, block_ftl은 너무 간단한 전략으로 flash를 관리하기 때문에 BM의 기능을 제대로 사용하지 못함. 오직 ValidP만 사용함.

[Add guidline of BM]
	다른 ftl이 BM을 사용할 수 있도록, 내가 BM을 ftl에서 사용하기 위해 수정했던 사항들을 적어놓은 txt. 다만, 위에서 말했듯이 BM을 library로 만들어서 컴파일에 포함시키게 바꾼다면 이것도 수정할 필요가 있음.

[Fix validate/invalidate error in BM API, (uint64_t)1 << offset]
	BM API function의 에러 수정. 기존에는 is_valid, validate, invalidate API 함수에서 ValidP의 offset에 해당하는 bit에 접근하기 위해 (1 << offset) 을 사용하였는데, 이렇게 1이라고만 하면 int형으로 인식하여서 32bit밖에 지원하지 못한다.
	따라서 ValidP_T인 uint64_t에 맞게 1을 uint64_t로 casting하여 사용할 수 있게 하였음. BM_Main.c에서 실제로 함수를 실행시켜 보니 정상적으로 동작함을 확인하였음.

[Fix BM API for primitives]
	API function 중 'BM_update_block_with_gc()' 를 삭제하였음. gc는 ftl마다 모두 다르게 동작하기 때문에 이렇게 하나의 함수로 표현할 수 없으며, 애초에 gc가 일어날 경우 그 내부에서 특정 전략과 조건, 상황에 따라 pull, push, trim 등의 primitives들이
	여러번 일어나게 될 가능성이 높음. 애초에 기본적인 primitives를 위한 update API는 이미 있으므로 이 함수를 사용하면 안 됨.
	또한, 기존의 BM API for primitives(BM_update_block_with_push)에서 ValidP를 건드리는 부분이 있었는데, 생각해본 결과 PE_cycle만 1 올리면 된다. ValidP와는 상관이 없으므로 건드리면 안 된다. 수정하였음.


[API 함수 동작 확인]
	BM API 함수들이 정상적으로 동작함을 확인하였음. 다만, 그렇게 부하가 큰 경우까지 고려하지는 않았으며 모든 경우의 테스트를 통과할 확률이 100%는 아님.
